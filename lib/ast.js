// Generated by CoffeeScript 1.10.0
(function() {
  var AST, ASTRegExp, ArrayExp, AssignExp, BinaryExp, BlockExp, BoolExp, DateExp, DefineExp, FloatExp, IfExp, IntegerExp, MemberExp, NullExp, ObjectExp, ParameterExp, ProcedureCallExp, ProcedureExp, StringExp, SymbolExp, UnaryExp, UndefinedExp,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  AST = (function() {
    function AST() {}

    return AST;

  })();

  AST.IntegerExp = IntegerExp = (function(superClass) {
    extend(IntegerExp, superClass);

    function IntegerExp(value) {
      if (!(this instanceof IntegerExp)) {
        return new IntegerExp(value);
      }
      if (typeof value === 'number') {
        if (Math.floor(value) === value) {
          Object.defineProperty(this, 'value', {
            value: value
          });
        } else {
          throw new Error("AST.IntegerExp:invalidValue: " + value);
        }
      } else {
        throw new Error("AST.IntegerExp:invalidValue: " + value);
      }
    }

    return IntegerExp;

  })(AST);

  AST.FloatExp = FloatExp = (function(superClass) {
    extend(FloatExp, superClass);

    function FloatExp(value) {
      if (!(this instanceof FloatExp)) {
        return new FloatExp(value);
      }
      if (typeof value === 'number') {
        Object.defineProperty(this, 'value', {
          value: value
        });
      } else {
        throw new Error("AST.FloatExp:invalidValue: " + value);
      }
    }

    return FloatExp;

  })(AST);

  AST.BoolExp = BoolExp = (function(superClass) {
    extend(BoolExp, superClass);

    function BoolExp(value) {
      if (!(this instanceof BoolExp)) {
        return new BoolExp(value);
      }
      if (typeof value === 'boolean') {
        Object.defineProperty(this, 'value', {
          value: value
        });
      } else {
        throw new Error("AST.BoolExp:invalidValue: " + value);
      }
    }

    return BoolExp;

  })(AST);

  AST.StringExp = StringExp = (function(superClass) {
    extend(StringExp, superClass);

    function StringExp(value) {
      if (!(this instanceof StringExp)) {
        return new StringExp(value);
      }
      if (typeof value === 'string') {
        Object.defineProperty(this, 'value', {
          value: value
        });
      } else {
        throw new Error("AST.StringExp:invalidValue: " + value);
      }
    }

    return StringExp;

  })(AST);

  AST.DateExp = DateExp = (function(superClass) {
    extend(DateExp, superClass);

    function DateExp(value) {
      if (!(this instanceof DateExp)) {
        return new DateExp(value);
      }
      if (value instanceof Date) {
        Object.defineProperty(this, 'value', {
          value: value
        });
      } else {
        throw new Error("AST.DateExp:invalidValue: " + value);
      }
    }

    return DateExp;

  })(AST);

  AST.NullExp = NullExp = (function(superClass) {
    extend(NullExp, superClass);

    function NullExp() {
      if (!(this instanceof NullExp)) {
        return new NullExp();
      }
    }

    return NullExp;

  })(AST);

  AST.UndefinedExp = UndefinedExp = (function(superClass) {
    extend(UndefinedExp, superClass);

    function UndefinedExp() {
      if (!(this instanceof UndefinedExp)) {
        return new UndefinedExp();
      }
    }

    return UndefinedExp;

  })(AST);

  AST.SymbolExp = SymbolExp = (function(superClass) {
    extend(SymbolExp, superClass);

    function SymbolExp(value) {
      if (!(this instanceof SymbolExp)) {
        return new SymbolExp(value);
      }
      if (typeof value === 'string') {
        Object.defineProperty(this, 'value', {
          value: value
        });
      } else {
        throw new Error("AST.SymbolExp:invaidValue: " + value);
      }
    }

    return SymbolExp;

  })(AST);

  AST.RegExp = ASTRegExp = (function(superClass) {
    extend(ASTRegExp, superClass);

    function ASTRegExp(value) {
      if (!(this instanceof ASTRegExp)) {
        return new ASTRegExp(value);
      }
      if (!(value instanceof RegExp)) {
        throw new Error("AST.RegExp:invalidValue: " + value);
      }
      Object.defineProperty(this, 'value', {
        value: value
      });
    }

    return ASTRegExp;

  })(AST);

  AST.ParameterExp = ParameterExp = (function(superClass) {
    extend(ParameterExp, superClass);

    function ParameterExp(name) {
      if (!(this instanceof ParameterExp)) {
        return new ParameterExp(name);
      }
      if (!(name instanceof SymbolExp)) {
        throw new Error("AST.ParameterExp:invalidName: " + name);
      }
      Object.defineProperty(this, 'name', {
        value: name
      });
    }

    return ParameterExp;

  })(AST);

  AST.ArrayExp = ArrayExp = (function(superClass) {
    extend(ArrayExp, superClass);

    function ArrayExp(items) {
      var i, item, j, len;
      if (!(this instanceof ArrayExp)) {
        return new ArrayExp(items);
      }
      if (!(items instanceof Array)) {
        throw new Error("AST.ArrayExp:invalidItems:notArrayExp: " + items);
      }
      for (i = j = 0, len = items.length; j < len; i = ++j) {
        item = items[i];
        if (!(item instanceof AST)) {
          throw new Error("AST.ArrayExp:invalidItem:[" + i + "]: " + item);
        }
      }
      Object.defineProperty(this, 'items', {
        value: items
      });
    }

    return ArrayExp;

  })(AST);

  AST.ObjectExp = ObjectExp = (function(superClass) {
    extend(ObjectExp, superClass);

    function ObjectExp(keyvals) {
      var i, j, keyval, len;
      if (!(this instanceof ObjectExp)) {
        return new ObjectExp(keyvals);
      }
      if (!(keyvals instanceof Array)) {
        throw new Error("AST.ObjectExp:invalidKeyVals:notArrayExp: " + keyvals);
      }
      for (i = j = 0, len = keyvals.length; j < len; i = ++j) {
        keyval = keyvals[i];
        if (!(keyval instanceof Array)) {
          throw new Error("AST.ObjectExp:invalidKeyVal:[" + i + "]: " + keyval);
        }
        if (!((keyval[0] instanceof AST.StringExp) || (keyval[0] instanceof AST.SymbolExp))) {
          throw new Error("AST.ObjectExp:invalidKey:[" + i + "]: " + keyval[0]);
        }
        if (!(keyval[1] instanceof AST)) {
          throw new Error("AST.ObjectExp:invalidValue:[" + i + "]: " + keyval[1]);
        }
      }
      Object.defineProperty(this, 'keyvals', {
        value: keyvals
      });
    }

    return ObjectExp;

  })(AST);

  AST.MemberExp = MemberExp = (function(superClass) {
    extend(MemberExp, superClass);

    function MemberExp(head, key) {
      if (!(this instanceof MemberExp)) {
        return new MemberExp(head, key);
      }
      if (!(head instanceof AST)) {
        throw new Error("AST.MemberExp:invalidHead: " + head);
      }
      if (!(key instanceof AST.SymbolExp)) {
        throw new Error("AST.MemberExp:invalidKey: " + key);
      }
      Object.defineProperties(this, {
        head: {
          value: head
        },
        key: {
          value: key
        }
      });
    }

    return MemberExp;

  })(AST);

  AST.UnaryExp = UnaryExp = (function(superClass) {
    extend(UnaryExp, superClass);

    function UnaryExp(op, rhs) {
      if (!(this instanceof UnaryExp)) {
        return new UnaryExp(op, rhs);
      }
      if (!(op instanceof SymbolExp)) {
        throw new Error("AST.UnaryExp:invalidOperator: " + op);
      }
      if (!(rhs instanceof AST)) {
        throw new Error("AST.UnaryExp:invalidRightHandSide: " + rhs);
      }
      Object.defineProperties(this, {
        op: {
          value: op
        },
        rhs: {
          value: rhs
        }
      });
    }

    return UnaryExp;

  })(AST);

  AST.BinaryExp = BinaryExp = (function(superClass) {
    extend(BinaryExp, superClass);

    function BinaryExp(op, lhs, rhs) {
      if (!(this instanceof BinaryExp)) {
        return new BinaryExp(op, lhs, rhs);
      }
      if (!(op instanceof SymbolExp)) {
        throw new Error("AST.BinaryExp:invalidOperator: " + op);
      }
      if (!(lhs instanceof AST)) {
        throw new Error("AST.BinaryExp:invalidLefttHandSide: " + lhs);
      }
      if (!(rhs instanceof AST)) {
        throw new Error("AST.BinaryExp:invalidRightHandSide: " + rhs);
      }
      Object.defineProperties(this, {
        op: {
          value: op
        },
        lhs: {
          value: lhs
        },
        rhs: {
          value: rhs
        }
      });
    }

    return BinaryExp;

  })(AST);

  AST.IfExp = IfExp = (function(superClass) {
    extend(IfExp, superClass);

    function IfExp(cond, thenExp, elseExp) {
      if (!(this instanceof IfExp)) {
        return new IfExp(cond, thenExp, elseExp);
      }
      if (!(cond instanceof AST)) {
        throw new Error("AST.If:invalidCond: " + cond);
      }
      if (!(thenExp instanceof AST)) {
        throw new Error("AST.If:invalidThen: " + thenExp);
      }
      if (!(elseExp instanceof AST)) {
        throw new Error("AST.If:invalidElse: " + elseExp);
      }
      Object.defineProperties(this, {
        cond: {
          value: cond
        },
        then: {
          value: thenExp
        },
        "else": {
          value: elseExp
        }
      });
    }

    return IfExp;

  })(AST);

  AST.BlockExp = BlockExp = (function(superClass) {
    extend(BlockExp, superClass);

    function BlockExp(body) {
      var exp, i, j, len;
      if (!(this instanceof BlockExp)) {
        return new BlockExp(body);
      }
      if (!(body instanceof Array)) {
        throw new Error("AST.Block:invalidBody:notArrayExp: " + body);
      }
      for (i = j = 0, len = body.length; j < len; i = ++j) {
        exp = body[i];
        if (!(exp instanceof AST)) {
          throw new Error("AST.Block:invalidExpression:[" + i + "]: " + exp);
        }
      }
      Object.defineProperty(this, 'body', {
        value: body
      });
    }

    return BlockExp;

  })(AST);

  AST.ProcedureCallExp = ProcedureCallExp = (function(superClass) {
    extend(ProcedureCallExp, superClass);

    function ProcedureCallExp(proc, args) {
      var arg, i, j, len;
      if (!(this instanceof ProcedureCallExp)) {
        return new ProcedureCallExp(proc, args);
      }
      if (!(proc instanceof AST)) {
        throw new Error("AST.ProcedureCallExp:invalidProcedure: " + proc);
      }
      if (!(args instanceof Array)) {
        throw new Error("AST.ProcedureCallExp:invalidArgs:notArrayExp: " + args);
      }
      for (i = j = 0, len = args.length; j < len; i = ++j) {
        arg = args[i];
        if (!(arg instanceof AST)) {
          throw new Error("AST.ProcedureCallExp:invalidArg:[" + i + "]: " + arg);
        }
      }
      Object.defineProperties(this, {
        proc: {
          value: proc
        },
        args: {
          value: args
        }
      });
    }

    return ProcedureCallExp;

  })(AST);

  AST.ProcedureExp = ProcedureExp = (function(superClass) {
    extend(ProcedureExp, superClass);

    function ProcedureExp(name, args, body) {
      var arg, i, j, len;
      if (!(this instanceof ProcedureExp)) {
        return new ProcedureExp(name, args, body);
      }
      if (arguments.length === 2) {
        body = args;
        args = name;
        name = null;
      }
      if (!((name === null) || (name instanceof AST.SymbolExp))) {
        throw new Error("AST.Procedure:invalidName: " + name);
      }
      if (!(args instanceof Array)) {
        throw new Error("AST.Procedure:invalidArgs:notArrayExp: " + args);
      }
      for (i = j = 0, len = args.length; j < len; i = ++j) {
        arg = args[i];
        if (!(arg instanceof AST.ParameterExp)) {
          throw new Error("AST.Procedure:invalidArg:notParameterExp:[" + i + "]: " + arg);
        }
      }
      if (!(body instanceof AST)) {
        throw new Error("AST.Procedure:invalidBody:notAST: " + body);
      }
      Object.defineProperties(this, {
        name: {
          value: name
        },
        args: {
          value: args
        },
        body: {
          value: body
        }
      });
    }

    return ProcedureExp;

  })(AST);

  AST.DefineExp = DefineExp = (function(superClass) {
    extend(DefineExp, superClass);

    function DefineExp(name, value) {
      if (!(this instanceof DefineExp)) {
        return new DefineExp(name, value);
      }
      if (!(name instanceof AST.SymbolExp)) {
        throw new Error("AST.DefineExp:invalidName: " + name);
      }
      if (!(value instanceof AST)) {
        throw new Error("AST.DefineExp:invalidValue: " + value);
      }
      Object.defineProperties(this, {
        name: {
          value: name
        },
        value: {
          value: value
        }
      });
    }

    return DefineExp;

  })(AST);

  AST.AssignExp = AssignExp = (function(superClass) {
    extend(AssignExp, superClass);

    function AssignExp(name, value) {
      if (!(this instanceof AssignExp)) {
        return new AssignExp(name, value);
      }
      if (!(name instanceof AST.SymbolExp)) {
        throw new Error("AST.AssignExp:invalidName: " + name);
      }
      if (!(value instanceof AST)) {
        throw new Error("AST.AssignExp:invalidValue: " + value);
      }
      Object.defineProperties(this, {
        name: {
          value: name
        },
        value: {
          value: value
        }
      });
    }

    return AssignExp;

  })(AST);

  module.exports = AST;

}).call(this);

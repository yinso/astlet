// Generated by CoffeeScript 1.8.0
(function() {
  var AST, ASTArray, ASTDate, ASTRegExp, AssignExp, BinaryExp, BlockExp, Boolean, DefineExp, Float, IfExp, Integer, MemberExp, Null, Parameter, ProcedureCallExp, ProcedureExp, Record, String, Symbol, UnaryExp, Undefined,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  AST = (function() {
    function AST() {}

    return AST;

  })();

  AST.Integer = Integer = (function(_super) {
    __extends(Integer, _super);

    function Integer(value) {
      if (!(this instanceof Integer)) {
        return new Integer(value);
      }
      if (typeof value === 'number') {
        if (Math.floor(value) === value) {
          Object.defineProperty(this, 'value', {
            value: value
          });
        } else {
          throw new Error("AST.Integer:invalidValue: " + value);
        }
      } else {
        throw new Error("AST.Integer:invalidValue: " + value);
      }
    }

    return Integer;

  })(AST);

  AST.Float = Float = (function(_super) {
    __extends(Float, _super);

    function Float(value) {
      if (!(this instanceof Float)) {
        return new Float(value);
      }
      if (typeof value === 'number') {
        Object.defineProperty(this, 'value', {
          value: value
        });
      } else {
        throw new Error("AST.Float:invalidValue: " + value);
      }
    }

    return Float;

  })(AST);

  AST.Boolean = Boolean = (function(_super) {
    __extends(Boolean, _super);

    function Boolean(value) {
      if (!(this instanceof Boolean)) {
        return new Boolean(value);
      }
      if (typeof value === 'boolean') {
        Object.defineProperty(this, 'value', {
          value: value
        });
      } else {
        throw new Error("AST.Boolean:invalidValue: " + value);
      }
    }

    return Boolean;

  })(AST);

  AST.String = String = (function(_super) {
    __extends(String, _super);

    function String(value) {
      if (!(this instanceof String)) {
        return new String(value);
      }
      if (typeof value === 'string') {
        Object.defineProperty(this, 'value', {
          value: value
        });
      } else {
        throw new Error("AST.String:invalidValue: " + value);
      }
    }

    return String;

  })(AST);

  AST.Date = ASTDate = (function(_super) {
    __extends(ASTDate, _super);

    function ASTDate(value) {
      if (!(this instanceof ASTDate)) {
        return new ASTDate(value);
      }
      if (value instanceof Date) {
        Object.defineProperty(this, 'value', {
          value: value
        });
      } else {
        throw new Error("AST.Date:invalidValue: " + value);
      }
    }

    return ASTDate;

  })(AST);

  AST.Null = Null = (function(_super) {
    __extends(Null, _super);

    function Null() {
      if (!(this instanceof Null)) {
        return new Null();
      }
    }

    return Null;

  })(AST);

  AST.Undefined = Undefined = (function(_super) {
    __extends(Undefined, _super);

    function Undefined() {
      if (!(this instanceof Undefined)) {
        return new Undefined();
      }
    }

    return Undefined;

  })(AST);

  AST.Symbol = Symbol = (function(_super) {
    __extends(Symbol, _super);

    function Symbol(value) {
      if (!(this instanceof Symbol)) {
        return new Symbol(value);
      }
      if (typeof value === 'string') {
        Object.defineProperty(this, 'value', {
          value: value
        });
      } else {
        throw new Error("AST.Symbol:invaidValue: " + value);
      }
    }

    return Symbol;

  })(AST);

  AST.RegExp = ASTRegExp = (function(_super) {
    __extends(ASTRegExp, _super);

    function ASTRegExp(value) {
      if (!(this instanceof ASTRegExp)) {
        return new ASTRegExp(value);
      }
      if (!(value instanceof RegExp)) {
        throw new Error("AST.RegExp:invalidValue: " + value);
      }
      Object.defineProperty(this, 'value', {
        value: value
      });
    }

    return ASTRegExp;

  })(AST);

  AST.Parameter = Parameter = (function(_super) {
    __extends(Parameter, _super);

    function Parameter(name) {
      if (!(this instanceof Parameter)) {
        return new Parameter(name);
      }
      if (!(name instanceof Symbol)) {
        throw new Error("AST.Parameter:invalidName: " + name);
      }
      Object.defineProperty(this, 'name', {
        value: name
      });
    }

    return Parameter;

  })(AST);

  AST.Array = ASTArray = (function(_super) {
    __extends(ASTArray, _super);

    function ASTArray(items) {
      var i, item, _i, _len;
      if (!(this instanceof ASTArray)) {
        return new ASTArray(items);
      }
      if (!(items instanceof Array)) {
        throw new Error("AST.Array:invalidItems:notArray: " + items);
      }
      for (i = _i = 0, _len = items.length; _i < _len; i = ++_i) {
        item = items[i];
        if (!(item instanceof AST)) {
          throw new Error("AST.Array:invalidItem:[" + i + "]: " + item);
        }
      }
      Object.defineProperty(this, 'items', {
        value: items
      });
    }

    return ASTArray;

  })(AST);

  AST.Record = Record = (function(_super) {
    __extends(Record, _super);

    function Record(keyvals) {
      var i, keyval, _i, _len;
      if (!(this instanceof Record)) {
        return new Record(keyvals);
      }
      if (!(keyvals instanceof Array)) {
        throw new Error("AST.Record:invalidKeyVals:notArray: " + keyvals);
      }
      for (i = _i = 0, _len = keyvals.length; _i < _len; i = ++_i) {
        keyval = keyvals[i];
        if (!(keyval instanceof Array)) {
          throw new Error("AST.Record:invalidKeyVal:[" + i + "]: " + keyval);
        }
        if (!((keyval[0] instanceof AST.String) || (keyval[0] instanceof AST.Symbol))) {
          throw new Error("AST.Record:invalidKey:[" + i + "]: " + keyval[0]);
        }
        if (!(keyval[1] instanceof AST)) {
          throw new Error("AST.Record:invalidValue:[" + i + "]: " + keyval[1]);
        }
      }
      Object.defineProperty(this, 'keyvals', {
        value: keyvals
      });
    }

    return Record;

  })(AST);

  AST.MemberExp = MemberExp = (function(_super) {
    __extends(MemberExp, _super);

    function MemberExp(head, key) {
      if (!(this instanceof MemberExp)) {
        return new MemberExp(head, key);
      }
      if (!(head instanceof AST)) {
        throw new Error("AST.MemberExp:invalidHead: " + head);
      }
      if (!(key instanceof AST.Symbol)) {
        throw new Error("AST.MemberExp:invalidKey: " + key);
      }
      Object.defineProperties(this, {
        head: {
          value: head
        },
        key: {
          value: key
        }
      });
    }

    return MemberExp;

  })(AST);

  AST.UnaryExp = UnaryExp = (function(_super) {
    __extends(UnaryExp, _super);

    function UnaryExp(op, rhs) {
      if (!(this instanceof UnaryExp)) {
        return new UnaryExp(op, rhs);
      }
      if (!(op instanceof Symbol)) {
        throw new Error("AST.UnaryExp:invalidOperator: " + op);
      }
      if (!(rhs instanceof AST)) {
        throw new Error("AST.UnaryExp:invalidRightHandSide: " + rhs);
      }
      Object.defineProperties(this, {
        op: {
          value: op
        },
        rhs: {
          value: rhs
        }
      });
    }

    return UnaryExp;

  })(AST);

  AST.BinaryExp = BinaryExp = (function(_super) {
    __extends(BinaryExp, _super);

    function BinaryExp(op, lhs, rhs) {
      if (!(this instanceof BinaryExp)) {
        return new BinaryExp(op, lhs, rhs);
      }
      if (!(op instanceof Symbol)) {
        throw new Error("AST.BinaryExp:invalidOperator: " + op);
      }
      if (!(lhs instanceof AST)) {
        throw new Error("AST.BinaryExp:invalidLefttHandSide: " + lhs);
      }
      if (!(rhs instanceof AST)) {
        throw new Error("AST.BinaryExp:invalidRightHandSide: " + rhs);
      }
      Object.defineProperties(this, {
        op: {
          value: op
        },
        lhs: {
          value: lhs
        },
        rhs: {
          value: rhs
        }
      });
    }

    return BinaryExp;

  })(AST);

  AST.IfExp = IfExp = (function(_super) {
    __extends(IfExp, _super);

    function IfExp(cond, thenExp, elseExp) {
      if (!(this instanceof IfExp)) {
        return new IfExp(cond, thenExp, elseExp);
      }
      if (!(cond instanceof AST)) {
        throw new Error("AST.If:invalidCond: " + cond);
      }
      if (!(thenExp instanceof AST)) {
        throw new Error("AST.If:invalidThen: " + thenExp);
      }
      if (!(elseExp instanceof AST)) {
        throw new Error("AST.If:invalidElse: " + elseExp);
      }
      Object.defineProperties(this, {
        cond: {
          value: cond
        },
        then: {
          value: thenExp
        },
        "else": {
          value: elseExp
        }
      });
    }

    return IfExp;

  })(AST);

  AST.BlockExp = BlockExp = (function(_super) {
    __extends(BlockExp, _super);

    function BlockExp(body) {
      var exp, i, _i, _len;
      if (!(this instanceof BlockExp)) {
        return new BlockExp(body);
      }
      if (!(body instanceof Array)) {
        throw new Error("AST.Block:invalidBody:notArray: " + body);
      }
      for (i = _i = 0, _len = body.length; _i < _len; i = ++_i) {
        exp = body[i];
        if (!(exp instanceof AST)) {
          throw new Error("AST.Block:invalidExpression:[" + i + "]: " + exp);
        }
      }
      Object.defineProperty(this, 'body', {
        value: body
      });
    }

    return BlockExp;

  })(AST);

  AST.ProcedureCallExp = ProcedureCallExp = (function(_super) {
    __extends(ProcedureCallExp, _super);

    function ProcedureCallExp(proc, args) {
      var arg, i, _i, _len;
      if (!(this instanceof ProcedureCallExp)) {
        return new ProcedureCallExp(proc, args);
      }
      if (!(proc instanceof AST)) {
        throw new Error("AST.ProcedureCallExp:invalidProcedure: " + proc);
      }
      if (!(args instanceof Array)) {
        throw new Error("AST.ProcedureCallExp:invalidArgs:notArray: " + args);
      }
      for (i = _i = 0, _len = args.length; _i < _len; i = ++_i) {
        arg = args[i];
        if (!(arg instanceof AST)) {
          throw new Error("AST.ProcedureCallExp:invalidArg:[" + i + "]: " + arg);
        }
      }
      Object.defineProperties(this, {
        proc: {
          value: proc
        },
        args: {
          value: args
        }
      });
    }

    return ProcedureCallExp;

  })(AST);

  AST.ProcedureExp = ProcedureExp = (function(_super) {
    __extends(ProcedureExp, _super);

    function ProcedureExp(name, args, body) {
      var arg, i, _i, _len;
      if (!(this instanceof ProcedureExp)) {
        return new ProcedureExp(name, args, body);
      }
      if (arguments.length === 2) {
        body = args;
        args = name;
        name = null;
      }
      if (!((name === null) || (name instanceof AST.Symbol))) {
        throw new Error("AST.Procedure:invalidName: " + name);
      }
      if (!(args instanceof Array)) {
        throw new Error("AST.Procedure:invalidArgs:notArray: " + args);
      }
      for (i = _i = 0, _len = args.length; _i < _len; i = ++_i) {
        arg = args[i];
        if (!(arg instanceof AST.Parameter)) {
          throw new Error("AST.Procedure:invalidArg:notParameter:[" + i + "]: " + arg);
        }
      }
      if (!(body instanceof AST)) {
        throw new Error("AST.Procedure:invalidBody:notAST: " + body);
      }
      Object.defineProperties(this, {
        name: {
          value: name
        },
        args: {
          value: args
        },
        body: {
          value: body
        }
      });
    }

    return ProcedureExp;

  })(AST);

  AST.DefineExp = DefineExp = (function(_super) {
    __extends(DefineExp, _super);

    function DefineExp(name, value) {
      if (!(this instanceof DefineExp)) {
        return new DefineExp(name, value);
      }
      if (!(name instanceof AST.Symbol)) {
        throw new Error("AST.DefineExp:invalidName: " + name);
      }
      if (!(value instanceof AST)) {
        throw new Error("AST.DefineExp:invalidValue: " + value);
      }
      Object.defineProperties(this, {
        name: {
          value: name
        },
        value: {
          value: value
        }
      });
    }

    return DefineExp;

  })(AST);

  AST.AssignExp = AssignExp = (function(_super) {
    __extends(AssignExp, _super);

    function AssignExp(name, value) {
      if (!(this instanceof AssignExp)) {
        return new AssignExp(name, value);
      }
      if (!(name instanceof AST.Symbol)) {
        throw new Error("AST.AssignExp:invalidName: " + name);
      }
      if (!(value instanceof AST)) {
        throw new Error("AST.AssignExp:invalidValue: " + value);
      }
      Object.defineProperties(this, {
        name: {
          value: name
        },
        value: {
          value: value
        }
      });
    }

    return AssignExp;

  })(AST);

  module.exports = AST;

}).call(this);

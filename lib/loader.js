// Generated by CoffeeScript 1.10.0
(function() {
  var AST, Loader;

  AST = require('./ast');

  Loader = (function() {
    function Loader() {
      if (!(this instanceof Loader)) {
        return new Loader();
      }
    }

    Loader.prototype.load = function(obj) {
      var key;
      key = this.key(obj);
      if (Loader.prototype.hasOwnProperty(key)) {
        return this[key](obj);
      } else {
        throw new Error("Loader.load:unknown_type: " + obj.type);
      }
    };

    Loader.prototype.key = function(obj) {
      return '_' + obj.type;
    };

    Loader.prototype._integer = function(obj) {
      return AST.IntegerExp(obj.value);
    };

    Loader.prototype._float = function(obj) {
      return AST.FloatExp(obj.value);
    };

    Loader.prototype._boolean = function(obj) {
      return AST.BoolExp(obj.value);
    };

    Loader.prototype._string = function(obj) {
      return AST.StringExp(obj.value);
    };

    Loader.prototype._date = function(obj) {
      return AST.DateExp(obj.value);
    };

    Loader.prototype._null = function(obj) {
      return AST.NullExp();
    };

    Loader.prototype._undefined = function(obj) {
      return AST.UndefinedExp();
    };

    Loader.prototype._symbol = function(obj) {
      return AST.SymbolExp(obj.value);
    };

    Loader.prototype._regex = function(obj) {
      return AST.RegExp(obj.value);
    };

    Loader.prototype._parameter = function(obj) {
      var name;
      name = typeof obj.name === 'string' ? AST.SymbolExp(obj.name) : this.load(obj.name);
      return AST.ParameterExp(name);
    };

    Loader.prototype._array = function(obj) {
      var item, items;
      items = (function() {
        var i, len, ref, results;
        ref = obj.items;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          results.push(this.load(item));
        }
        return results;
      }).call(this);
      return AST.ArrayExp(items);
    };

    Loader.prototype._object = function(obj) {
      var key, keyvals, val;
      keyvals = (function() {
        var ref, results;
        ref = obj.properties;
        results = [];
        for (key in ref) {
          val = ref[key];
          results.push([AST.SymbolExp(key), this.load(val)]);
        }
        return results;
      }).call(this);
      return AST.ObjectExp(keyvals);
    };

    Loader.prototype._member = function(obj) {
      var head, key;
      head = this.load(obj.head);
      key = this.load(obj.key);
      return AST.MemberExp(head, key);
    };

    Loader.prototype._unary = function(obj) {
      var op, rhs;
      op = this.load(obj.op);
      rhs = this.load(obj.rhs);
      return AST.UnaryExp(op, rhs);
    };

    Loader.prototype._binary = function(obj) {
      var lhs, op, rhs;
      op = this.load(obj.op);
      lhs = this.load(obj.lhs);
      rhs = this.load(obj.rhs);
      return AST.BinaryExp(op, lhs, rhs);
    };

    Loader.prototype._if = function(obj) {
      var cond, elseExp, thenExp;
      cond = this.load(obj.cond);
      thenExp = this.load(obj.then);
      elseExp = this.load(obj["else"]);
      return AST.IfExp(cond, thenExp, elseExp);
    };

    Loader.prototype._block = function(obj) {
      var body, exp;
      body = (function() {
        var i, len, ref, results;
        ref = obj.body || [];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          exp = ref[i];
          results.push(this.load(exp));
        }
        return results;
      }).call(this);
      return AST.BlockExp(body);
    };

    Loader.prototype._procedureCall = function(obj) {
      var arg, args, proc;
      proc = this.load(obj.proc);
      args = (function() {
        var i, len, ref, results;
        ref = obj.args || [];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          arg = ref[i];
          results.push(this.load(arg));
        }
        return results;
      }).call(this);
      return AST.ProcedureCallExp(proc, args);
    };

    Loader.prototype._procedure = function(obj) {
      var arg, args, body, name;
      name = obj.name ? this.load(obj.name) : null;
      args = (function() {
        var i, len, ref, results;
        ref = obj.args || [];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          arg = ref[i];
          results.push(this.load(arg));
        }
        return results;
      }).call(this);
      body = this.load(obj.body);
      return AST.ProcedureExp(name, args, body);
    };

    Loader.prototype._define = function(obj) {
      var name, value;
      name = this.load(obj.name);
      value = this.load(obj.value);
      return AST.DefineExp(name, value);
    };

    Loader.prototype._assign = function(obj) {
      var name, value;
      name = this.load(obj.name);
      value = this.load(obj.value);
      return AST.AssignExp(name, value);
    };

    return Loader;

  })();

  AST.Loader = Loader;

  AST.load = function(obj) {
    var loader;
    loader = Loader();
    return loader.load(obj);
  };

  module.exports = Loader;

}).call(this);
